openapi: 3.1.0
info:
  title: backend
  version: '1.0'
  summary: this API design documentation for iTravelo project
  contact:
    name: mahmoud sakr
servers:
  - url: 'http://localhost:8080'
paths:
  '/users/{userId}':
    parameters:
      - schema:
          type: integer
        name: userId
        in: path
        required: true
        description: Id of an existing user.
    get:
      summary: Get User Info by User ID
      tags:
        - Users
      responses:
        '200':
          description: User Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Get User Alice Smith:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
        '404':
          description: User Not Found
      operationId: get-users-userId
      description: Retrieve the information of the user with the matching user ID.
    patch:
      summary: Update User Information
      operationId: patch-users-userId
      responses:
        '200':
          description: User Updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Updated User Rebecca Baker:
                  value:
                    id: 13
                    firstName: Rebecca
                    lastName: Baker
                    email: rebecca@gmail.com
                    dateOfBirth: '1985-10-02'
                    emailVerified: false
                    createDate: '2019-08-24'
        '404':
          description: User Not Found
        '409':
          description: Email Already Taken
      description: Update the information of an existing user.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                  description: 'If a new email is given, the user''s email verified property will be set to false.'
                dateOfBirth:
                  type: string
            examples:
              Update First Name:
                value:
                  firstName: Rebecca
              Update Email:
                value:
                  email: rebecca@gmail.com
              Update Last Name & Date of Birth:
                value:
                  lastName: Baker
                  dateOfBirth: '1985-10-02'
        description: Patch user properties to update.
      tags:
        - Users
  /user:
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
        '400':
          description: Missing Required Information
        '409':
          description: Email Already Taken
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                dateOfBirth:
                  type: string
                  format: date
              required:
                - firstName
                - lastName
                - email
                - dateOfBirth
            examples:
              Create User Bob Fellow:
                value:
                  firstName: Bob
                  lastName: Fellow
                  email: bob.fellow@gmail.com
                  dateOfBirth: '1996-08-24'
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
      tags:
        - Users
  /routes:
    get:
      summary: Get list of routes
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Route'
      operationId: get-routes
      tags:
        - Routes
      description: ''
    post:
      summary: Create route
      operationId: post-routes
      responses:
        '200':
          description: OK
      description: Creates a route
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
        description: ''
      tags:
        - Routes
  '/routes/{routeId}':
    parameters:
      - $ref: '#/components/parameters/routeId'
    get:
      summary: Get a route
      tags:
        - Routes
      responses: {}
      operationId: get-routes-routeId
      description: Retrieves a routed by id
    put:
      summary: Update route
      operationId: put-routes-routeId
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Route'
      description: Upates a route by id
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Route'
      tags:
        - Routes
    delete:
      summary: Delete route
      operationId: delete-routes-routeId
      responses:
        '200':
          description: OK
      tags:
        - Routes
      description: Deletes a route by id
  /workorders:
    get:
      summary: Get list of work orders
      tags:
        - WorkOrders
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkOrder'
      operationId: get-workorders
      description: Retrieves list of work orders
    post:
      summary: Create work order
      operationId: post-workorders
      responses:
        '200':
          description: OK
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkOrder'
      tags:
        - WorkOrders
      description: Creates a work order
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkOrder'
components:
  schemas:
    User:
      title: User
      type: object
      description: ''
      examples:
        - id: 142
          firstName: Alice
          lastName: Smith
          email: alice.smith@gmail.com
          dateOfBirth: '1997-10-31'
          emailVerified: true
          signUpDate: '2019-08-24'
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        dateOfBirth:
          type: string
          format: date
          example: '1997-10-31'
        emailVerified:
          type: boolean
          description: Set to true if the user's email has been verified.
        createDate:
          type: string
          format: date
          description: The date that the user was created.
      required:
        - id
        - firstName
        - lastName
        - email
        - emailVerified
    UserDto:
      title: UserDto
      type: object
      description: ''
      examples: []
      properties:
        id:
          type: integer
          description: Unique identifier for the given user.
        firstName:
          type: string
        lastName:
          type: string
      required:
        - id
        - firstName
        - lastName
    Stop:
      description: Route is composed of a list of stops
      type: object
      x-examples:
        example-1:
          id: 123
          Type: ''
          datetime: date
          latitude: ''
          longitude: ''
          title: ''
          description: ''
      properties:
        id:
          type: number
        Type:
          type: string
          enum:
            - Pick-Up
            - Drop-Off
        datetime:
          type: string
          minLength: 1
        latitude:
          type: string
        longitude:
          type: string
        title:
          type: string
        description:
          type: string
      required:
        - id
        - Type
        - datetime
        - latitude
        - longitude
      examples: []
    Route:
      description: defines the list of stops of the Work Order
      type: object
      x-examples:
        example-1:
          id: 0
          title: string
          description: string
      properties:
        id:
          type: number
        title:
          type: string
          minLength: 1
        description:
          type: string
          minLength: 1
        stops:
          type: array
          items:
            $ref: '#/components/schemas/Stop'
      required:
        - id
        - title
        - description
      examples: []
    WorkOrder:
      title: WorkOrder
      type: object
      examples: []
      properties:
        id:
          type: number
        route:
          $ref: '#/components/schemas/Route'
        startDatetime:
          type: string
        endDatetime:
          type: string
        car:
          $ref: '#/components/schemas/Vehicle'
        creator:
          $ref: '#/components/schemas/UserDto'
        owner:
          $ref: '#/components/schemas/UserDto'
        tourGuide:
          $ref: '#/components/schemas/UserDto'
        driver:
          $ref: '#/components/schemas/UserDto'
        serviceId:
          type: number
        bookingReferences:
          type: array
          items:
            type: string
    Vehicle:
      title: Vehicle
      type: object
      description: ''
      properties:
        id:
          type: number
        type:
          type: string
          enum:
            - CAR
            - BUS
        title:
          type: string
      required:
        - id
        - type
  parameters:
    routeId:
      name: routeId
      in: path
      required: true
      schema:
        type: number
      description: id of object
tags:
  - name: Routes
  - name: WorkOrders
  - name: Users
  - name: Vehicles
